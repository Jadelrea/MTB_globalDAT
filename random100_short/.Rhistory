setwd("/run/user/1000/gvfs/dav:host=saco.csic.es,ssl=true,user=53353764C,prefix=%2Fremote.php%2Fwebdav/portatil/Prometeo/RNAseq")
install.packages("ggplot2")
setwd("~/")
install.packages("ggplot2")
library(ggplot2)
install.packages("DESeq2")
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("apeglm")
library(apeglm)
library(airway)
BiocManager::install("airway")
library(airway)
data(airway)
head(assay(airway))
library(dbplyr)
head(as.tibble(assay(airway)))
head(as_tibble(assay(airway)))
head(as_tible(assay(airway)))
library(dplyr)
head(as_tible(assay(airway)))
head(as_tibble(assay(airway)))
keep <- head(which(rowSums(assay(airway)) >= 10), 3000)
airway <- airway[keep,]
library(DESeq2)
dds <- DESeqDataSet(airway, ~cell + dex)
dds$dex <- relevel(dds$dex, "untrt")
dds <- DESeq(dds)
res <- results(dds)
head(res)
x <- model.matrix(design(dds), colData(dds))
head(x)
param <- dispersions(dds)
param
?dispersions
head(res)
mle <- log(2) * cbind(res$log2FoldChange, res$lfcSE)
head(mle)
offset <- matrix(log(sizeFactors(dds)),
ncol=ncol(dds),
nrow=nrow(dds),byrow=TRUE)
head(offset)
system.time({
fitR <- apeglm(Y=airway, x=x, log.lik=NULL, param=param, coef=ncol(x),
threshold=log(2) * 1, mle=mle, offset=offset, method="nbinomR")
})
fit <- fitR
names(fit)
str(fit$prior.control)
?str
#comapare to DESeq2
system.time({
res.shr <- lfcShrink(dds, coef=5, type="normal")
})
DESeq2.lfc <- res.shr$log2FoldChange
apeglm.lfc <- log2(exp(1)) * fit$map[,5]
plot(DESeq2.lfc, apeglm.lfc)
abline(0,1)
par(mfrow=c(1,3))
lims <- c(-8,8)
hline <- function() abline(h=c(-4:4 * 2),col=rgb(0,0,0,.2))
xlab <- "mean of normalized counts"
plot(res$baseMean, res$log2FoldChange, log="x",
ylim=lims, main="MLE", xlab=xlab)
hline()
plot(res$baseMean, DESeq2.lfc, log="x",
ylim=lims, main="DESeq2", xlab=xlab)
hline()
plot(res$baseMean, apeglm.lfc, log="x",
ylim=lims, main="apeglm", xlab=xlab)
hline()
plot(res$padj, fit$svalue, col="blue",
xlab="DESeq2 padj", ylab="apeglm svalue",
xlim=c(0,.2), ylim=c(0,.02))
dev.off()
dev.off()
plot(res$padj, fit$svalue, col="blue",
xlab="DESeq2 padj", ylab="apeglm svalue",
xlim=c(0,.2), ylim=c(0,.02))
plot(res$padj, fit$svalue, col="blue",
xlab="DESeq2 padj", ylab="apeglm svalue")
plot(res$padj, fit$svalue, col="blue",
xlab="DESeq2 padj", ylab="apeglm svalue",
xlim=c(0,.2), ylim=c(0,.02))
View(fit)
fit[["map"]]
View(fit)[["map"]]
View(fit[["map"]])
View(fit)
View(fit$map)
View(fit$svalue)
design(dds)
dds <- DESeqDataSet(airway, ~dex + cell)
dds <- DESeq(dds)
res <- results(dds)
x <- model.matrix(design(dds), colData(dds))
param <- dispersions(dds)
mle <- log(2) * cbind(res$log2FoldChange, res$lfcSE)
offset <- matrix(log(sizeFactors(dds)),
ncol=ncol(dds),
nrow=nrow(dds),byrow=TRUE)
ncol(x)
system.time({
fitR <- apeglm(Y=airway, x=x, log.lik=NULL, param=param,
threshold=log(2) * 1, mle=mle, offset=offset, method="nbinomR")
})
x
library(ggtree)
BiocManager::install("ggtree")
?as.treedata
library(treeio)
library(treeio)
?as.treedata
install.packages("treeio")
install.packages("treeio")
BiocManager::install("treeio")
BiocManager::install("enrichplot")
library(clusterProfiler)
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library(org.Sc.sgd.db)
BiocManager::install("org.Sc.sgd.db")
library(org.Sc.sgd.db)
library(org.Sc.sgd.db)
BiocManager::install("org.Sc.sgd.db")
source("~/Documents/portatil/TesisAlbaC/multiomics/mixomics.R", echo=TRUE)
library(BiocManager)
?install()
BiocManager::install("org.Sc.sgd.db")
install.packages("org.Sc.sgd.db")
BiocManager::install("AnnotationDbi")
library(AnnotationDbi)
BiocManager::install("pathview")
options(timeout = 300)
BiocManager::install("pathview")
install.packages("~/Downloads/org.Sc.sgd.db_3.16.0.tar.gz", repos = NULL, type = "source")
detach("package:AnnotationDbi", unload = TRUE)
remove.packages("AnnotationDbi", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
BiocManager::install("Annotation"Dbi)
BiocManager::install("AnnotationDbi")
install.packages("~/Downloads/org.Sc.sgd.db_3.16.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/AnnotationDbi_1.60.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/org.Sc.sgd.db_3.16.0.tar.gz", repos = NULL, type = "source")
library(clusterProfiler)
library(org.Sc.sgd.db)
library(AnnotationDbi)
library(ape)
library(dplyr)
setwd("~/comp/DatasetGlobalMTB/random100_short")
random100_ANC <- ape::read.tree("~/comp/DatasetGlobalMTB/random100_short/iq_tree_anc_asr.treefile")
random100_ANC_t <- as_tibble(random100_ANC)
random100_ANC_t <- as_tibble(random100_ANC)
random100_ANC <- ape::read.tree("~/comp/DatasetGlobalMTB/random100_short/iq_tree_anc_asr.treefile")
random100_ANC_t <- as_tibble(random100_ANC)
library(treeio)
random100_ANC_t <- as_tibble(random100_ANC)
mut_table <- random100_ANC_t[,c(1,2,4)]
mut_table$labparent <- random100_ANC_t[random100_ANC_t$node[random100_ANC_t$parent],4]
colnames(mut_table) <- c("parent","node","labnode","labparent")
write.csv(as.matrix(mut_table),"nodeparent.csv", quote = FALSE, col.names = FALSE,
row.names = FALSE)
library(treeio)
library(ape)
library(ggtree)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(stringr)
phylo_data <- read.delim(paste0(MYPATH,"/phylogeny_result.csv"))
phylo_data$sample <- sapply(str_split(phylo_data$archivos, pattern="\\."),"[[", 1)
node_mut <- read.csv2("node_mut.csv", header=FALSE) #después de correr getnodeseq y getmutinnodes
#node_mut <- read.csv2("~/comp/DatasetGlobalMTB/randomseqs_100/iqtree_anc/sampletest/node_mut.csv",
#                      header=FALSE)
colnames(node_mut) <- c("node","muts")
random100_ANC_t <- merge(random100_ANC_t,node_mut, by="node")
head(random100_ANC_t)
dim(random100_ANC_t)
node_mut <- read.csv2("node_mut.csv", header=FALSE) #después de correr getnodeseq y getmutinnodes
View(node_mut)
#node_mut <- read.csv2("~/comp/DatasetGlobalMTB/randomseqs_100/iqtree_anc/sampletest/node_mut.csv",
#                      header=FALSE)
colnames(node_mut) <- c("node","mutnr","muts")
MYPATH <- "~/comp/DatasetGlobalMTB/random100_short"
setwd(MYPATH)
random100_ANC <- ape::read.tree(paste0(MYPATH,"iq_tree_anc_asr.treefile"))
MYPATH <- "~/comp/DatasetGlobalMTB/random100_short/"
random100_ANC <- ape::read.tree(paste0(MYPATH,"iq_tree_anc_asr.treefile"))
random100_ANC_t <- as_tibble(random100_ANC)
phylo_data <- read.delim(paste0(MYPATH,"/phylogeny_result.csv"))
phylo_data$sample <- sapply(str_split(phylo_data$archivos, pattern="\\."),"[[", 1)
pos <- unlist(sapply(random100_ANC_t$label, function(x){grep(x,phylo_data$sample)}))
random100_ANC_t$phylo <- NA
random100_ANC_t$phylo[1:92] <- phylo_data$lineage[pos]
random100_ANC_t$phylo[seq(1:length(pos))] <- phylo_data$lineage[pos]
pg <- ggtree(random100_ANC) %<+% random100_ANC_t
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=label),size=2, hjust=-0.4) +
theme_tree2()
node_mut <- read.csv2("node_mut.csv", header=FALSE) #después de correr getnodeseq y getmutinnodes
#node_mut <- read.csv2("~/comp/DatasetGlobalMTB/randomseqs_100/iqtree_anc/sampletest/node_mut.csv",
#                      header=FALSE)
colnames(node_mut) <- c("node","mutnr","muts")
random100_ANC_t <- merge(random100_ANC_t,node_mut, by="node")
pg <- ggtree(random100_ANC) %<+% random100_ANC_t
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=label),size=2, hjust=-0.4) +
theme_tree2()
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=muts),size=2, hjust=-0.4) +
theme_tree2()
head(node_mut)
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=mutnr),size=2, hjust=-0.4) +
theme_tree2()
plot(random100_ANC_t$branch.length,random100_ANC_t$mutnr)
res_data <- read.delim("~/comp/DatasetGlobalMTB/MTB_globalDAT/random100_short/resistance_phylogeny_result")
View(res_data)
View(res_data)
res_data$Sample <- gsub("\\*","",res_data$Sample)
res_data$Sample <- gsub(".snp","",res_data$Sample)
res_data <- res_data %>%
arrange(Sample)
colnames(res_data)[1] <- "label"
View(res_data)
pos <- unlist(sapply(random100_ANC_t$label, function(x){grep(x,res_data$label)}))
node_mut <- read.csv2("node_mut.csv", header=FALSE) #después de correr getnodeseq y getmutinnodes
#node_mut <- read.csv2("~/comp/DatasetGlobalMTB/randomseqs_100/iqtree_anc/sampletest/node_mut.csv",
#                      header=FALSE)
colnames(node_mut) <- c("node","mutnr","muts")
random100_ANC_t <- merge(random100_ANC_t,node_mut, by="node")
head(random100_ANC_t)
random100_ANC_t <- merge(random100_ANC_t,res_data,by="label")
View(random100_ANC_t)
random100_ANC <- ape::read.tree(paste0(MYPATH,"iq_tree_anc_asr.treefile"))
random100_ANC_t <- as_tibble(random100_ANC)
MYPATH <- "~/comp/DatasetGlobalMTB/MTB_globalDAT/random100_short/"
setwd(MYPATH)
random100_ANC <- ape::read.tree(paste0(MYPATH,"iq_tree_anc_asr.treefile"))
random100_ANC_t <- as_tibble(random100_ANC)
#phylo_data <- read.delim(paste0(MYPATH,"phylogeny_result.csv"))
res_data <- read.delim(paste0(MYPATH,"resistance_phylogeny_result"))
res_data$Sample <- gsub("\\*","",res_data$Sample)
res_data$Sample <- gsub(".snp","",res_data$Sample)
res_data <- res_data %>%
arrange(Sample)
colnames(res_data)[1] <- "label"
node_mut <- read.csv2("node_mut.csv", header=FALSE) #después de correr getnodeseq y getmutinnodes
#node_mut <- read.csv2("~/comp/DatasetGlobalMTB/randomseqs_100/iqtree_anc/sampletest/node_mut.csv",
#                      header=FALSE)
colnames(node_mut) <- c("node","mutnr","muts")
View(node_mut)
random100_ANC_t <- merge(random100_ANC_t,node_mut, by="node")
random100_ANC_t <- merge(random100_ANC_t,res_data,by="label")
random100_ANC_t <- random100_ANC_t %>%
mutate(resistant = sapply(seq(1:nrow(random100_ANC_t)), function(x){
if("Resistant" %in% random100_ANC_t[x,]){
return(TRUE)
}else{
return(FALSE)
}
}
))
png("nodelengh_mutnr_corr.png")
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=mutnr),size=2, hjust=-0.4) +
theme_tree2()
dev.off()
png("nodelengh_mutnr_corr.png")
plot(random100_ANC$edge.length,random100_ANC_t$mutnr)
dev.off()
png("nodelengh_mutnr_corr.png")
plot(random100_ANC_t$branch.length,random100_ANC_t$mutnr)
dev.off()
plot(random100_ANC_t$branch.length,random100_ANC_t$mutnr)
date_loc <- read.csv("~/comp/DatasetGlobalMTB/MTB_globalDAT/full_meta_wport.csv")
View(date_loc)
colnames(date_loc)[1] <- "label"
random100_ANC_t <- merge(random100_ANC_t,date_loc, by="label")
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=country2),size=2, hjust=-0.4) +
theme_tree2()
pg <- ggtree(random100_ANC) %<+% random100_ANC_t
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=country2),size=2, hjust=-0.4) +
theme_tree2()
pg +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=year_date),size=2, hjust=-0.4) +
theme_tree2()
MYPATH <- "/home/javier/comp/DatasetGlobalMTB/gt_700"
setwd(MYPATH)
random100_ANC <- ape::read.tree("megaNJ.nwk")
random100_ANC_t <- as_tibble(random100_ANC)
head(random100_ANC_t)
dim(random100_ANC_t)
mut_table <- random100_ANC_t[,c(1,2,4)]
mut_table$labparent <- random100_ANC_t[random100_ANC_t$node[random100_ANC_t$parent],4]
colnames(mut_table) <- c("parent","node","labnode","labparent")
write.csv(as.matrix(mut_table),"nodeparent.csv", quote = FALSE, col.names = FALSE,
row.names = FALSE)
head(mut_table)
pg <- ggtree(random100_ANC) %<+% random100_ANC_t
pg
mut_table$labparent
print(mut_table$labparent,n=100)
MYPATH <- "~/comp/DatasetGlobalMTB/MTB_globalDAT/random100_short/"
setwd(MYPATH)
random100_ANC <- ape::read.tree(paste0(MYPATH,"iq_tree_anc_asr.treefile"))
random100_ANC_t <- as_tibble(random100_ANC)
fulltree <- ape::read.tree("/home/javier/comp/DatasetGlobalMTB/gt_700/megaNJ.nwk")
fulltree_t <- as_tibble(fulltree)
fulltree_resdata <- read.delim("/home/javier/comp/DatasetGlobalMTB/gt_700/resistance_phylogeny_result")
fulltree_resdata$Sample <- gsub("\\*","",fulltree_resdata$Sample)
fulltree_resdata$Sample <- gsub(".snp","",fulltree_resdata$Sample)
fulltree_resdata <- fulltree_resdata %>%
arrange(Sample)
colnames(fulltree_resdata)[1] <- "label"
fulltree_t <- merge(fulltree_t, fulltree_resdata,by="label")
fulltree_t <- fulltree_t %>%
mutate(resistant = sapply(seq(1:nrow(fulltree_t)), function(x){
if("Resistant" %in% fulltree_t[x,]){
return(TRUE)
}else{
return(FALSE)
}
}
))
date_loc <- read.csv("~/comp/DatasetGlobalMTB/MTB_globalDAT/full_meta_wport.csv")
colnames(date_loc)[1] <- "label"
fulltree_t <- merge(fulltree_t,date_loc, by="label")
head(fulltree_t)
View(fulltree_t)
pg_fulltree <- ggtree(fulltree, aes(color=Phylogeny)) %<+% fulltree_t
pg_fulltree +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=Phylogeny),size=2, hjust=-0.4) +
theme_tree2()
gc()
fulltree_t <- fulltree_t %>%
mutate(lineage = sapply(str_split(fulltree$Phylogeny, pattern="."),"[[",1))
sapply(str_split(fulltree$Phylogeny, pattern="."),"[[",1)
sapply(str_split(fulltree_t$Phylogeny, pattern="."),"[[",1)
sapply(str_split(fulltree_t$Phylogeny, pattern="\\."),"[[",1)
fulltree_t <- fulltree_t %>%
mutate(lineage = sapply(str_split(fulltree_t$Phylogeny, pattern="\\."),"[[",1))
pg <- ggtree(random100_ANC) %<+% random100_ANC_t
pg_fulltree <- ggtree(fulltree, aes(color=lineage)) %<+% fulltree_t
pg_fulltree +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=Phylogeny),size=2, hjust=-0.4) +
theme_tree2()
pg_fulltree <- ggtree(fulltree, aes(color=lineage), layout = "circular") %<+% fulltree_t
pg_fulltree +
#geom_tiplab(aes(label=node), size=2) +
geom_text(aes(label=Phylogeny),size=2, hjust=-0.4) +
theme_tree2()
pg_fulltree +
#geom_tiplab(aes(label=node), size=2) +
#geom_text(aes(label=Phylogeny),size=2, hjust=-0.4) +
geom_highlight(aes(fill=lineage)) +
theme_tree2()
pg_fulltree +
#geom_tiplab(aes(label=node), size=2) +
#geom_text(aes(label=Phylogeny),size=2, hjust=-0.4) +
geom_highlight() +
theme_tree2()
pg_fulltree +
#geom_tiplab(aes(label=node), size=2) +
#geom_text(aes(label=Phylogeny),size=2, hjust=-0.4) +
geom_highlight(node = 10) +
theme_tree2()
pg_fulltree +
#geom_tiplab(aes(label=node), size=2) +
#geom_text(aes(label=Phylogeny),size=2, hjust=-0.4) +
geom_highlight(node = 10, color="blue") +
theme_tree2()
gc)()
gc()
322984:3600
322984/3600
